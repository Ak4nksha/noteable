{"version":3,"sources":["component/noteTaking.js","App.js","serviceWorker.js","index.js"],"names":["NoteTaking","props","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","state","items","isLoaded","addNote","bind","assertThisInitialized","_this2","fetch","then","res","json","setState","event","console","log","theTitle","value","newItem","title","theNote","prevState","concat","preventDefault","_this3","_this$state","react_default","a","createElement","className","map","val","onSubmit","type","placeholder","ref","required","note","Component","App","noteTaking","isLocalhost","Boolean","window","location","hostname","match","registerValidSW","swUrl","config","navigator","serviceWorker","register","registration","onupdatefound","installingWorker","installing","onstatechange","controller","onUpdate","onSuccess","catch","error","ReactDOM","render","src_App","document","getElementById","URL","process","href","origin","addEventListener","response","contentType","headers","get","status","indexOf","ready","unregister","reload","checkValidServiceWorker"],"mappings":"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","file":"static/js/main.a70d311c.chunk.js","sourcesContent":["import React, { Component } from 'react';\r\n\r\n\r\nclass NoteTaking extends Component {\r\n    constructor(props){\r\n        super(props);\r\n\r\n        this.state = {\r\n            items: [],\r\n            isLoaded: false\r\n        }\r\n\r\n        this.addNote = this.addNote.bind(this);\r\n    }\r\n     \r\n\r\n    componentDidMount() {\r\n        fetch('https://api.myjson.com/bins/ofg84')\r\n        .then(res => res.json())\r\n        .then(json => {\r\n            this.setState({\r\n                isLoaded: true,\r\n                items: json\r\n            })\r\n        })\r\n    }\r\n\r\n    addNote(event){\r\n        console.log(\"working\");\r\n        if(this.theTitle.value !== \"\")\r\n        {\r\n            var newItem = {\r\n                title: this.theTitle.value,\r\n                value: this.theNote.value\r\n            };\r\n        }\r\n        this.setState((prevState) => {\r\n            return{\r\n                items: prevState.items.concat(newItem)\r\n            }\r\n        });\r\n        \r\n        this.theTitle.value = \"\";\r\n        this.theNote.value = \"\";\r\n        console.log(\"this.state.items\");\r\n\r\n\r\n        event.preventDefault();\r\n\r\n    }\r\n\r\n    render() {\r\n        var {isLoaded, items} = this.state;\r\n\r\n\r\n    return (\r\n      <div>\r\n          \r\n          {/* HEADER */}\r\n\r\n          \r\n        <header><h1>Noteable</h1></header>\r\n        \r\n\r\n        {/* BODY */}\r\n\r\n        <div className=\"main-content\">\r\n         <ul>\r\n             {this.state.items.map((val) => <li>{val.title} :{val.value}</li>)}\r\n         </ul>\r\n      </div>\r\n\r\n      { /* FOOTER */ } \r\n      <footer>\r\n          <form onSubmit={this.addNote}>\r\n              <input \r\n              type=\"text\" \r\n              placeholder=\"Title\"\r\n              ref={(title) => this.theTitle = title}  \r\n              required/>\r\n              <textarea \r\n              placeholder=\"Enter text\"\r\n              ref={(note) => this.theNote = note}\r\n              />\r\n              <button type=\"submit\">Add Note</button>\r\n          </form>\r\n      </footer>\r\n\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default NoteTaking;\r\n","import React, { Component } from 'react';\nimport NoteTaking from './component/noteTaking';\nimport './component/noteTaking.css';\n\nclass App extends Component {\n  render() {\n    return (\n      <div className=\"noteable\">\n        <NoteTaking />\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.register();\n"],"sourceRoot":""}