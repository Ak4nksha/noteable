{"version":3,"sources":["component/noteTaking.js","App.js","serviceWorker.js","index.js"],"names":["NoteTaking","props","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","savedState","localStorage","getItem","state","items","JSON","parse","show","currentNote","currentTitle","addEditNote","bind","assertThisInitialized","handleClose","handleShow","setState","idx","currentNotes","splice","console","log","setItem","stringify","event","theNote","value","theTitle","newItem","title","note","length","theIndex","concat","undefined","preventDefault","_this2","react_default","a","createElement","ti","onClick","Modal_default","onHide","Header","closeButton","Title","Body","onSubmit","type","placeholder","ref","defaultValue","required","className","map","val","Card_default","style","width","Text","split","i","Link","href","initializeEdit","deleteNote","Component","App","noteTaking","isLocalhost","Boolean","window","location","hostname","match","registerValidSW","swUrl","config","navigator","serviceWorker","register","then","registration","onupdatefound","installingWorker","installing","onstatechange","controller","onUpdate","onSuccess","catch","error","ReactDOM","render","src_App","document","getElementById","URL","process","origin","addEventListener","fetch","response","contentType","headers","get","status","indexOf","ready","unregister","reload","checkValidServiceWorker"],"mappings":"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","file":"static/js/main.7674248f.chunk.js","sourcesContent":["import React,  { Component }  from 'react';\r\nimport Modal from 'react-bootstrap/Modal';\r\nimport { TiDocumentAdd, TiDocumentDelete, TiEdit } from \"react-icons/ti\";\r\nimport Card from 'react-bootstrap/Card';\r\n\r\nclass NoteTaking extends Component {\r\n    constructor(props){\r\n        super(props);\r\n\r\n        var savedState = localStorage.getItem(\"state\");\r\n        this.state = {\r\n            items: (!savedState) ? [] : JSON.parse(savedState),\r\n            show: false,\r\n        }\r\n\r\n        this.currentNote = \"\";\r\n        this.currentTitle = \"\";\r\n\r\n        this.addEditNote = this.addEditNote.bind(this);\r\n        this.handleClose = this.handleClose.bind(this);\r\n        this.handleShow = this.handleShow.bind(this);\r\n    }\r\n\r\n    handleClose() {\r\n        this.setState({ show: false });\r\n      }\r\n    \r\n      handleShow() {\r\n        this.setState({ show: true });\r\n      }    \r\n\r\n    deleteNote(idx){\r\n      var currentNotes = this.state.items;\r\n      currentNotes.splice(idx, 1);\r\n      this.setState( {items: currentNotes});\r\n      console.log(this.state);\r\n\r\n      localStorage.setItem(\"state\", JSON.stringify(currentNotes));\r\n    }\r\n    \r\n    addEditNote(event){\r\n      console.log(this.theNote.value);\r\n        if(this.theTitle.value !== \"\")\r\n        {\r\n            var newItem = {\r\n                title: this.theTitle.value,\r\n                note: this.theNote.value\r\n            };\r\n        }\r\n        var currentNotes = this.state.items;\r\n\r\n        // Current Title is available only on edit\r\n        if(this.currentTitle.length > 0) {\r\n          currentNotes.splice(this.theIndex, 1, newItem)\r\n         } else{\r\n           currentNotes = currentNotes.concat(newItem)\r\n         }\r\n\r\n        this.setState({ items : currentNotes });\r\n        \r\n        this.theTitle.value = \"\";\r\n        this.theNote.value = \"\";\r\n        this.currentTitle = \"\";\r\n        this.currentNote = \"\";\r\n        this.theIndex = undefined;\r\n        console.log(this.state.items);\r\n        this.handleClose();\r\n\r\n        event.preventDefault();\r\n        localStorage.setItem(\"state\", JSON.stringify(currentNotes));\r\n\r\n    }\r\n    \r\n    initializeEdit(idx){\r\n      this.theIndex = idx;\r\n      this.currentNote = this.state.items[idx].note;\r\n      this.currentTitle = this.state.items[idx].title;\r\n      this.handleShow();\r\n    }\r\n\r\n    render() {\r\n    return (\r\n      <div>\r\n        <header><h1>Noteable\r\n        <TiDocumentAdd onClick={this.handleShow} /></h1>\r\n\r\n        <Modal show={this.state.show} onHide={this.handleClose}>\r\n          <Modal.Header closeButton>\r\n            <Modal.Title>Add Note</Modal.Title>\r\n          </Modal.Header>\r\n          <Modal.Body>\r\n          <form onSubmit={this.addEditNote}>\r\n              <input \r\n              type=\"text\" \r\n              placeholder=\"Title\"\r\n              ref={(title) => this.theTitle = title}\r\n              defaultValue = {this.currentTitle}\r\n              required/>\r\n              <textarea \r\n              placeholder=\"Enter text\"\r\n              ref={(note) => this.theNote=note}\r\n              defaultValue = {this.currentNote}\r\n              />\r\n              <button type=\"submit\">Add Note</button>\r\n          </form>\r\n          </Modal.Body>\r\n        </Modal>\r\n            \r\n        </header>\r\n        <div className=\"main-content\">\r\n             {this.state.items.map((val, idx) =>\r\n             <Card style={{ width: '18rem' }}>\r\n              <Card.Body>\r\n                <Card.Title>{val.title}</Card.Title>\r\n                <Card.Text>\r\n                  {val.note.split(\"\\n\").map((i) => {\r\n            return <div>{i}</div>;\r\n        })}\r\n                </Card.Text>\r\n                <Card.Link href=\"#\" ><TiEdit onClick={() => this.initializeEdit(idx)} /></Card.Link>\r\n                <Card.Link href=\"#\"><TiDocumentDelete onClick = {() => this.deleteNote(idx)} /></Card.Link>\r\n              </Card.Body>\r\n            </Card>)\r\n             }\r\n      </div>\r\n\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default NoteTaking;\r\n","import React, { Component } from 'react';\nimport NoteTaking from './component/noteTaking';\nimport './component/noteTaking.css';\n\nclass App extends Component {\n  render() {\n    return (\n      <div className=\"noteable\">\n        <NoteTaking />\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport 'bootstrap/dist/css/bootstrap.css';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.register();"],"sourceRoot":""}